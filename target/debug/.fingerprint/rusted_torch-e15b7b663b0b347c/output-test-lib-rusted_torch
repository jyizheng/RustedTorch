{"$message_type":"diagnostic","message":"unused import: `super::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/tests.rs","byte_start":4,"byte_end":12,"line_start":1,"line_end":1,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"use super::*;","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/autograd/tests.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::*;","highlight_start":1,"highlight_end":14},{"text":"use crate::autograd::function;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `super::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/tests.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Options`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/optimizers/tests.rs","byte_start":42,"byte_end":49,"line_start":2,"line_end":2,"column_start":29,"column_end":36,"is_primary":true,"text":[{"text":"use crate::tensor::{Tensor, Options};","highlight_start":29,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/optimizers/tests.rs","byte_start":40,"byte_end":49,"line_start":2,"line_end":2,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"use crate::tensor::{Tensor, Options};","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/optimizers/tests.rs","byte_start":33,"byte_end":34,"line_start":2,"line_end":2,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"use crate::tensor::{Tensor, Options};","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/optimizers/tests.rs","byte_start":49,"byte_end":50,"line_start":2,"line_end":2,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"use crate::tensor::{Tensor, Options};","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Options`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/optimizers/tests.rs:2:29\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::tensor::{Tensor, Options};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/tests.rs","byte_start":458,"byte_end":465,"line_start":18,"line_end":18,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/autograd/tests.rs","byte_start":458,"byte_end":465,"line_start":18,"line_end":18,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/tests.rs:18:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/tests.rs","byte_start":877,"byte_end":884,"line_start":31,"line_end":31,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/autograd/tests.rs","byte_start":877,"byte_end":884,"line_start":31,"line_end":31,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/tests.rs:31:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/tests.rs","byte_start":1197,"byte_end":1204,"line_start":41,"line_end":41,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/autograd/tests.rs","byte_start":1197,"byte_end":1204,"line_start":41,"line_end":41,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/tests.rs:41:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":455,"byte_end":462,"line_start":18,"line_end":18,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":455,"byte_end":462,"line_start":18,"line_end":18,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:18:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":798,"byte_end":805,"line_start":27,"line_end":27,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":798,"byte_end":805,"line_start":27,"line_end":27,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:27:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":1139,"byte_end":1146,"line_start":36,"line_end":36,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":1139,"byte_end":1146,"line_start":36,"line_end":36,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:36:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":1479,"byte_end":1486,"line_start":45,"line_end":45,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":1479,"byte_end":1486,"line_start":45,"line_end":45,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:45:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":1827,"byte_end":1834,"line_start":54,"line_end":54,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":1827,"byte_end":1834,"line_start":54,"line_end":54,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:54:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":2147,"byte_end":2154,"line_start":62,"line_end":62,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":2147,"byte_end":2154,"line_start":62,"line_end":62,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":2468,"byte_end":2475,"line_start":70,"line_end":70,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":2468,"byte_end":2475,"line_start":70,"line_end":70,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:70:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":2961,"byte_end":2968,"line_start":82,"line_end":82,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":2961,"byte_end":2968,"line_start":82,"line_end":82,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:82:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":3223,"byte_end":3230,"line_start":90,"line_end":90,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":3223,"byte_end":3230,"line_start":90,"line_end":90,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:90:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":4023,"byte_end":4030,"line_start":112,"line_end":112,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":4023,"byte_end":4030,"line_start":112,"line_end":112,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:112:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":4358,"byte_end":4365,"line_start":120,"line_end":120,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":4358,"byte_end":4365,"line_start":120,"line_end":120,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:120:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":4703,"byte_end":4710,"line_start":128,"line_end":128,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":4703,"byte_end":4710,"line_start":128,"line_end":128,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:128:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5342,"byte_end":5349,"line_start":145,"line_end":145,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5342,"byte_end":5349,"line_start":145,"line_end":145,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:145:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5861,"byte_end":5868,"line_start":160,"line_end":160,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5861,"byte_end":5868,"line_start":160,"line_end":160,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:160:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `options`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":6257,"byte_end":6264,"line_start":169,"line_end":169,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":6257,"byte_end":6264,"line_start":169,"line_end":169,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        let options = Options::new().requires_grad(true);","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"_options","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `options`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:169:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let options = Options::new().requires_grad(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_options`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/optimizers/tests.rs","byte_start":2853,"byte_end":2862,"line_start":101,"line_end":101,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        let mut param = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/optimizers/tests.rs","byte_start":2853,"byte_end":2857,"line_start":101,"line_end":101,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut param = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/optimizers/tests.rs:101:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut param = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `assert_vec_near` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/tests.rs","byte_start":135,"byte_end":150,"line_start":9,"line_end":9,"column_start":8,"column_end":23,"is_primary":true,"text":[{"text":"    fn assert_vec_near(actual: &[f32], expected: &[f32], tolerance: f32) {","highlight_start":8,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `assert_vec_near` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/tests.rs:9:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn assert_vec_near(actual: &[f32], expected: &[f32], tolerance: f32) {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/tensor/options.rs","byte_start":1304,"byte_end":1898,"line_start":64,"line_end":86,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod options {","highlight_start":1,"highlight_end":18},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn device(device_type: DeviceType, index: i8) -> Options {","highlight_start":1,"highlight_end":67},{"text":"        Options::new().device(Device::new(device_type, index))","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn device_from(device: Device) -> Options {","highlight_start":1,"highlight_end":52},{"text":"        Options::new().device(device)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dtype(dtype: DType) -> Options {","highlight_start":1,"highlight_end":44},{"text":"        Options::new().dtype(dtype)","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn requires_grad(requires_grad: bool) -> Options {","highlight_start":1,"highlight_end":59},{"text":"        Options::new().requires_grad(requires_grad)","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn pinned_memory(pinned_memory: bool) -> Options {","highlight_start":1,"highlight_end":59},{"text":"        Options::new().pinned_memory(pinned_memory)","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::module_inception)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/options.rs:64:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod options {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn device(device_type: DeviceType, index: i8) -> Options {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::module_inception)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `clone` can be confused for the standard trait method `std::clone::Clone::clone`","code":{"code":"clippy::should_implement_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/tensor/storage.rs","byte_start":2444,"byte_end":2772,"line_start":94,"line_end":104,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn clone(&self) -> Result<Self, String> {","highlight_start":5,"highlight_end":50},{"text":"        let new_storage = Self::new(self.size, self.device)?;","highlight_start":1,"highlight_end":62},{"text":"        unsafe {","highlight_start":1,"highlight_end":17},{"text":"            std::ptr::copy_nonoverlapping(","highlight_start":1,"highlight_end":43},{"text":"                self.data.as_ptr(),","highlight_start":1,"highlight_end":36},{"text":"                new_storage.data.as_ptr(),","highlight_start":1,"highlight_end":43},{"text":"                self.size,","highlight_start":1,"highlight_end":27},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Ok(new_storage)","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::should_implement_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `clone` can be confused for the standard trait method `std::clone::Clone::clone`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/storage.rs:94:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clone(&self) -> Result<Self, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let new_storage = Self::new(self.size, self.device)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unsafe {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            std::ptr::copy_nonoverlapping(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(new_storage)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::should_implement_trait)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `impl` can be derived","code":{"code":"clippy::derivable_impls","explanation":null},"level":"warning","spans":[{"file_name":"src/tensor/tensor_impl.rs","byte_start":9398,"byte_end":9705,"line_start":331,"line_end":343,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"impl Default for TensorImpl {","highlight_start":1,"highlight_end":30},{"text":"    fn default() -> Self {","highlight_start":1,"highlight_end":27},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            shape: Vec::new(),","highlight_start":1,"highlight_end":31},{"text":"            strides: Vec::new(),","highlight_start":1,"highlight_end":33},{"text":"            numel: 0,","highlight_start":1,"highlight_end":22},{"text":"            storage_offset: 0,","highlight_start":1,"highlight_end":31},{"text":"            options: Options::default(),","highlight_start":1,"highlight_end":41},{"text":"            storage: None,","highlight_start":1,"highlight_end":27},{"text":"            autograd_meta: None,","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::derivable_impls)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace the manual implementation with a derive attribute","code":null,"level":"help","spans":[{"file_name":"src/tensor/tensor_impl.rs","byte_start":9398,"byte_end":9706,"line_start":331,"line_end":343,"column_start":1,"column_end":3,"is_primary":true,"text":[{"text":"impl Default for TensorImpl {","highlight_start":1,"highlight_end":30},{"text":"    fn default() -> Self {","highlight_start":1,"highlight_end":27},{"text":"        Self {","highlight_start":1,"highlight_end":15},{"text":"            shape: Vec::new(),","highlight_start":1,"highlight_end":31},{"text":"            strides: Vec::new(),","highlight_start":1,"highlight_end":33},{"text":"            numel: 0,","highlight_start":1,"highlight_end":22},{"text":"            storage_offset: 0,","highlight_start":1,"highlight_end":31},{"text":"            options: Options::default(),","highlight_start":1,"highlight_end":41},{"text":"            storage: None,","highlight_start":1,"highlight_end":27},{"text":"            autograd_meta: None,","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/tensor/tensor_impl.rs","byte_start":244,"byte_end":244,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct TensorImpl {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Default)]\n","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `impl` can be derived\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/tensor_impl.rs:331:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Default for TensorImpl {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn default() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            shape: Vec::new(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m343\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::derivable_impls)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: replace the manual implementation with a derive attribute\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Default)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0mpub struct TensorImpl {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/tensor/mod.rs","byte_start":102,"byte_end":117,"line_start":7,"line_end":7,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub mod tensor;","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/mod.rs:7:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod tensor;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `clone` can be confused for the standard trait method `std::clone::Clone::clone`","code":{"code":"clippy::should_implement_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/tensor/tensor.rs","byte_start":9407,"byte_end":10102,"line_start":301,"line_end":319,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn clone(&self) -> Self {","highlight_start":5,"highlight_end":34},{"text":"        if let Some(ref impl_) = self.impl_ {","highlight_start":1,"highlight_end":46},{"text":"            if let Some(storage) = impl_.storage() {","highlight_start":1,"highlight_end":53},{"text":"                if let Ok(cloned_storage) = storage.as_ref().clone() {","highlight_start":1,"highlight_end":71},{"text":"                    if let Ok(new_impl) = TensorImpl::new_with_storage(","highlight_start":1,"highlight_end":72},{"text":"                        impl_.shape(),","highlight_start":1,"highlight_end":39},{"text":"                        impl_.options().clone(),","highlight_start":1,"highlight_end":49},{"text":"                        Rc::new(cloned_storage),","highlight_start":1,"highlight_end":49},{"text":"                        impl_.storage_offset(),","highlight_start":1,"highlight_end":48},{"text":"                    ) {","highlight_start":1,"highlight_end":24},{"text":"                        return Self {","highlight_start":1,"highlight_end":38},{"text":"                            impl_: Some(Rc::new(new_impl)),","highlight_start":1,"highlight_end":60},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Self::new()","highlight_start":1,"highlight_end":20},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `clone` can be confused for the standard trait method `std::clone::Clone::clone`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/tensor.rs:301:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn clone(&self) -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(ref impl_) = self.impl_ {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Some(storage) = impl_.storage() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let Ok(cloned_storage) = storage.as_ref().clone() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/tensor/tests.rs","byte_start":28,"byte_end":6127,"line_start":4,"line_end":188,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_default() {","highlight_start":1,"highlight_end":36},{"text":"        let x = Tensor::new();","highlight_start":1,"highlight_end":31},{"text":"        assert!(!x.defined());","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_shape() {","highlight_start":1,"highlight_end":34},{"text":"        let x = Tensor::empty(&[2, 3]);","highlight_start":1,"highlight_end":40},{"text":"        assert!(x.defined());","highlight_start":1,"highlight_end":30},{"text":"        assert_eq!(x.dim(), 2);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 6);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(x.strides(), vec![3, 1]);","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_scalar() {","highlight_start":1,"highlight_end":35},{"text":"        let x = Tensor::scalar(2.0f32);","highlight_start":1,"highlight_end":40},{"text":"        assert!(x.defined());","highlight_start":1,"highlight_end":30},{"text":"        assert_eq!(x.dim(), 0);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 1);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.to_list::<f32>(), vec![2.0]);","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_ones() {","highlight_start":1,"highlight_end":33},{"text":"        let x = Tensor::ones(&[2, 3]);","highlight_start":1,"highlight_end":39},{"text":"        assert_eq!(x.dim(), 2);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 6);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(x.strides(), vec![3, 1]);","highlight_start":1,"highlight_end":45},{"text":"        assert_eq!(x.to_list::<f32>(), vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0]);","highlight_start":1,"highlight_end":76},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_zeros() {","highlight_start":1,"highlight_end":34},{"text":"        let x = Tensor::zeros(&[2, 3]);","highlight_start":1,"highlight_end":40},{"text":"        assert_eq!(x.dim(), 2);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 6);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(x.strides(), vec![3, 1]);","highlight_start":1,"highlight_end":45},{"text":"        assert_eq!(x.to_list::<f32>(), vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);","highlight_start":1,"highlight_end":76},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_rand() {","highlight_start":1,"highlight_end":33},{"text":"        let x = Tensor::rand(&[2, 3]);","highlight_start":1,"highlight_end":39},{"text":"        assert_eq!(x.dim(), 2);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 6);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(x.strides(), vec![3, 1]);","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_randn() {","highlight_start":1,"highlight_end":34},{"text":"        let x = Tensor::randn(&[2, 3]);","highlight_start":1,"highlight_end":40},{"text":"        assert_eq!(x.dim(), 2);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 6);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(x.strides(), vec![3, 1]);","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_bernoulli() {","highlight_start":1,"highlight_end":38},{"text":"        let x = Tensor::bernoulli(&[2, 3], 0.5);","highlight_start":1,"highlight_end":49},{"text":"        assert_eq!(x.dim(), 2);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 6);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(x.strides(), vec![3, 1]);","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_1d() {","highlight_start":1,"highlight_end":31},{"text":"        let x = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        assert_eq!(x.dim(), 1);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 3);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![3]);","highlight_start":1,"highlight_end":40},{"text":"        assert_eq!(x.strides(), vec![1]);","highlight_start":1,"highlight_end":42},{"text":"        assert_eq!(x.to_list::<f32>(), vec![1.0, 2.0, 3.0]);","highlight_start":1,"highlight_end":61},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_2d() {","highlight_start":1,"highlight_end":31},{"text":"        let x = Tensor::from_array_2d(vec![vec![1.0f32, 2.0], vec![3.0, 4.0], vec![5.0, 6.0]]);","highlight_start":1,"highlight_end":96},{"text":"        assert_eq!(x.dim(), 2);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 6);","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(x.shape(), vec![3, 2]);","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(x.strides(), vec![2, 1]);","highlight_start":1,"highlight_end":45},{"text":"        assert_eq!(x.to_list::<f32>(), vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0]);","highlight_start":1,"highlight_end":76},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_constructor_3d() {","highlight_start":1,"highlight_end":31},{"text":"        let x = Tensor::from_array_3d(vec![","highlight_start":1,"highlight_end":44},{"text":"            vec![vec![4.0f32, 2.0, 3.0], vec![1.0, 0.0, 3.0]],","highlight_start":1,"highlight_end":63},{"text":"            vec![vec![4.0, 2.0, 3.0], vec![1.0, 0.0, 3.0]]","highlight_start":1,"highlight_end":59},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        assert_eq!(x.dim(), 3);","highlight_start":1,"highlight_end":32},{"text":"        assert_eq!(x.numel(), 12);","highlight_start":1,"highlight_end":35},{"text":"        assert_eq!(x.shape(), vec![2, 2, 3]);","highlight_start":1,"highlight_end":46},{"text":"        assert_eq!(x.strides(), vec![6, 3, 1]);","highlight_start":1,"highlight_end":48},{"text":"        assert_eq!(x.to_list::<f32>(), vec![4.0, 2.0, 3.0, 1.0, 0.0, 3.0, 4.0, 2.0, 3.0, 1.0, 0.0, 3.0]);","highlight_start":1,"highlight_end":106},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_broadcasting_scalar_tensor() {","highlight_start":1,"highlight_end":43},{"text":"        let scalar = Tensor::scalar(5.0f32);","highlight_start":1,"highlight_end":45},{"text":"        let tensor = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":68},{"text":"        let result = &scalar + &tensor;","highlight_start":1,"highlight_end":40},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(result.defined());","highlight_start":1,"highlight_end":35},{"text":"        assert_eq!(result.shape(), vec![3]);","highlight_start":1,"highlight_end":45},{"text":"        assert_eq!(result.to_list::<f32>(), vec![6.0, 7.0, 8.0]);","highlight_start":1,"highlight_end":66},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_broadcasting_different_shapes() {","highlight_start":1,"highlight_end":46},{"text":"        let a = Tensor::from_array_2d(vec![vec![1.0f32, 2.0, 3.0]]);","highlight_start":1,"highlight_end":69},{"text":"        let b = Tensor::from_array_2d(vec![vec![4.0f32], vec![5.0]]);","highlight_start":1,"highlight_end":70},{"text":"        let result = &a + &b;","highlight_start":1,"highlight_end":30},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(result.defined());","highlight_start":1,"highlight_end":35},{"text":"        assert_eq!(result.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":48},{"text":"        assert_eq!(result.to_list::<f32>(), vec![5.0, 6.0, 7.0, 6.0, 7.0, 8.0]);","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_broadcasting_incompatible_shapes() {","highlight_start":1,"highlight_end":49},{"text":"        let a = Tensor::from_array_1d(vec![1.0f32, 2.0]);","highlight_start":1,"highlight_end":58},{"text":"        let b = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        let result = &a + &b;","highlight_start":1,"highlight_end":30},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(!result.defined());","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_broadcasting_all_operations() {","highlight_start":1,"highlight_end":44},{"text":"        let a = Tensor::from_array_2d(vec![vec![2.0f32, 4.0]]);","highlight_start":1,"highlight_end":64},{"text":"        let b = Tensor::from_array_2d(vec![vec![1.0f32], vec![2.0]]);","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let add_result = &a + &b;","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(add_result.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(add_result.to_list::<f32>(), vec![3.0, 5.0, 4.0, 6.0]);","highlight_start":1,"highlight_end":75},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let mul_result = &a * &b;","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(mul_result.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(mul_result.to_list::<f32>(), vec![2.0, 4.0, 4.0, 8.0]);","highlight_start":1,"highlight_end":75},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let sub_result = &a - &b;","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(sub_result.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(sub_result.to_list::<f32>(), vec![1.0, 3.0, 0.0, 2.0]);","highlight_start":1,"highlight_end":75},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let div_result = &a / &b;","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(div_result.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(div_result.to_list::<f32>(), vec![2.0, 4.0, 1.0, 2.0]);","highlight_start":1,"highlight_end":75},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_broadcasting_1d_to_2d() {","highlight_start":1,"highlight_end":38},{"text":"        let a = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        let b = Tensor::from_array_2d(vec![vec![1.0f32, 1.0, 1.0], vec![2.0, 2.0, 2.0]]);","highlight_start":1,"highlight_end":90},{"text":"        let result = &a + &b;","highlight_start":1,"highlight_end":30},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(result.defined());","highlight_start":1,"highlight_end":35},{"text":"        assert_eq!(result.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":48},{"text":"        assert_eq!(result.to_list::<f32>(), vec![2.0, 3.0, 4.0, 3.0, 4.0, 5.0]);","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_broadcasting_utilities() {","highlight_start":1,"highlight_end":39},{"text":"        use crate::tensor::broadcasting::{is_broadcastable, broadcast_shapes};","highlight_start":1,"highlight_end":79},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(is_broadcastable(&[3], &[1, 3]));","highlight_start":1,"highlight_end":50},{"text":"        assert!(is_broadcastable(&[1, 3], &[2, 1]));","highlight_start":1,"highlight_end":53},{"text":"        assert!(!is_broadcastable(&[2], &[3]));","highlight_start":1,"highlight_end":48},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(broadcast_shapes(&[3], &[1, 3]).unwrap(), vec![1, 3]);","highlight_start":1,"highlight_end":74},{"text":"        assert_eq!(broadcast_shapes(&[1, 3], &[2, 1]).unwrap(), vec![2, 3]);","highlight_start":1,"highlight_end":77},{"text":"        assert!(broadcast_shapes(&[2], &[3]).is_err());","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/tests.rs:4:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[test]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"deref on an immutable reference","code":{"code":"clippy::borrow_deref_ref","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/function.rs","byte_start":891,"byte_end":904,"line_start":36,"line_end":36,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"                &*grad_output * &inputs[1],","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::borrow_deref_ref)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if you would like to reborrow, try removing `&*`","code":null,"level":"help","spans":[{"file_name":"src/autograd/function.rs","byte_start":891,"byte_end":904,"line_start":36,"line_end":36,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"                &*grad_output * &inputs[1],","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"grad_output","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: deref on an immutable reference\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/function.rs:36:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &*grad_output * &inputs[1],\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if you would like to reborrow, try removing `&*`: `grad_output`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::borrow_deref_ref)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"deref on an immutable reference","code":{"code":"clippy::borrow_deref_ref","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/function.rs","byte_start":935,"byte_end":948,"line_start":37,"line_end":37,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"                &*grad_output * &inputs[0],","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you would like to reborrow, try removing `&*`","code":null,"level":"help","spans":[{"file_name":"src/autograd/function.rs","byte_start":935,"byte_end":948,"line_start":37,"line_end":37,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"                &*grad_output * &inputs[0],","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"grad_output","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: deref on an immutable reference\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/function.rs:37:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &*grad_output * &inputs[0],\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if you would like to reborrow, try removing `&*`: `grad_output`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/function.rs","byte_start":1169,"byte_end":10481,"line_start":51,"line_end":332,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub mod function {","highlight_start":1,"highlight_end":19},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn add(a: &Tensor, b: &Tensor, _alpha: f32) -> Tensor {","highlight_start":1,"highlight_end":64},{"text":"        a + b","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn sub(a: &Tensor, b: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":51},{"text":"        if !a.defined() || !b.defined() {","highlight_start":1,"highlight_end":42},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let a_data = a.to_list::<f32>();","highlight_start":1,"highlight_end":41},{"text":"        let b_data = b.to_list::<f32>();","highlight_start":1,"highlight_end":41},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let result_data: Vec<f32> = a_data.iter().zip(b_data.iter())","highlight_start":1,"highlight_end":69},{"text":"            .map(|(&x, &y)| x - y)","highlight_start":1,"highlight_end":35},{"text":"            .collect();","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = a.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn mul(a: &Tensor, b: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":51},{"text":"        a * b","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn div(a: &Tensor, b: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":51},{"text":"        if !a.defined() || !b.defined() {","highlight_start":1,"highlight_end":42},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let a_data = a.to_list::<f32>();","highlight_start":1,"highlight_end":41},{"text":"        let b_data = b.to_list::<f32>();","highlight_start":1,"highlight_end":41},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let result_data: Vec<f32> = a_data.iter().zip(b_data.iter())","highlight_start":1,"highlight_end":69},{"text":"            .map(|(&x, &y)| x / y)","highlight_start":1,"highlight_end":35},{"text":"            .collect();","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = a.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn sin(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":39},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| val.sin()).collect();","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn cos(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":39},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| val.cos()).collect();","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn pow(base: &Tensor, exponent: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":61},{"text":"        base.pow(exponent)","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn sum(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":39},{"text":"        x.sum()","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn relu(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":40},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| val.max(0.0)).collect();","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn gelu(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":40},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| {","highlight_start":1,"highlight_end":61},{"text":"            0.5 * val * (1.0 + (val * 0.7978845608 * (1.0 + 0.044715 * val * val)).tanh())","highlight_start":1,"highlight_end":91},{"text":"        }).collect();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn silu(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":40},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| {","highlight_start":1,"highlight_end":61},{"text":"            val / (1.0 + (-val).exp())","highlight_start":1,"highlight_end":39},{"text":"        }).collect();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn softmax(x: &Tensor, _dim: i64) -> Tensor {","highlight_start":1,"highlight_end":54},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let max_val = data.iter().fold(f32::NEG_INFINITY, |a, &b| a.max(b));","highlight_start":1,"highlight_end":77},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let exp_data: Vec<f32> = data.iter().map(|&val| (val - max_val).exp()).collect();","highlight_start":1,"highlight_end":90},{"text":"        let sum_exp: f32 = exp_data.iter().sum();","highlight_start":1,"highlight_end":50},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let result_data: Vec<f32> = exp_data.iter().map(|&val| val / sum_exp).collect();","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn log_softmax(x: &Tensor, _dim: i64) -> Tensor {","highlight_start":1,"highlight_end":58},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let max_val = data.iter().fold(f32::NEG_INFINITY, |a, &b| a.max(b));","highlight_start":1,"highlight_end":77},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let exp_data: Vec<f32> = data.iter().map(|&val| (val - max_val).exp()).collect();","highlight_start":1,"highlight_end":90},{"text":"        let sum_exp: f32 = exp_data.iter().sum();","highlight_start":1,"highlight_end":50},{"text":"        let log_sum_exp = sum_exp.ln();","highlight_start":1,"highlight_end":40},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| val - max_val - log_sum_exp).collect();","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn tanh(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":40},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| val.tanh()).collect();","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn sigmoid(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":43},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| {","highlight_start":1,"highlight_end":61},{"text":"            1.0 / (1.0 + (-val).exp())","highlight_start":1,"highlight_end":39},{"text":"        }).collect();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn leaky_relu(x: &Tensor, negative_slope: f32) -> Tensor {","highlight_start":1,"highlight_end":67},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| {","highlight_start":1,"highlight_end":61},{"text":"            if val > 0.0 { val } else { negative_slope * val }","highlight_start":1,"highlight_end":63},{"text":"        }).collect();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn swish(x: &Tensor) -> Tensor {","highlight_start":1,"highlight_end":41},{"text":"        if !x.defined() {","highlight_start":1,"highlight_end":26},{"text":"            return Tensor::new();","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let data = x.to_list::<f32>();","highlight_start":1,"highlight_end":39},{"text":"        let result_data: Vec<f32> = data.iter().map(|&val| {","highlight_start":1,"highlight_end":61},{"text":"            val / (1.0 + (-val).exp())","highlight_start":1,"highlight_end":39},{"text":"        }).collect();","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let shape = x.shape();","highlight_start":1,"highlight_end":31},{"text":"        let options = crate::tensor::Options::default().dtype(crate::tensor::DType::Float32);","highlight_start":1,"highlight_end":94},{"text":"        match crate::tensor::TensorImpl::new_from_data(&result_data, &shape, options) {","highlight_start":1,"highlight_end":88},{"text":"            Ok(impl_) => Tensor {","highlight_start":1,"highlight_end":34},{"text":"                impl_: Some(std::rc::Rc::new(impl_)),","highlight_start":1,"highlight_end":54},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(_) => Tensor::new(),","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/function.rs:51:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod function {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn add(a: &Tensor, b: &Tensor, _alpha: f32) -> Tensor {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float has excessive precision","code":{"code":"clippy::excessive_precision","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/function.rs","byte_start":5033,"byte_end":5045,"line_start":175,"line_end":175,"column_start":39,"column_end":51,"is_primary":true,"text":[{"text":"            0.5 * val * (1.0 + (val * 0.7978845608 * (1.0 + 0.044715 * val * val)).tanh())","highlight_start":39,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::excessive_precision)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider changing the type or truncating it to","code":null,"level":"help","spans":[{"file_name":"src/autograd/function.rs","byte_start":5033,"byte_end":5045,"line_start":175,"line_end":175,"column_start":39,"column_end":51,"is_primary":true,"text":[{"text":"            0.5 * val * (1.0 + (val * 0.7978845608 * (1.0 + 0.044715 * val * val)).tanh())","highlight_start":39,"highlight_end":51}],"label":null,"suggested_replacement":"0.797_884_6","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: float has excessive precision\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/function.rs:175:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            0.5 * val * (1.0 + (val * 0.7978845608 * (1.0 + 0.044715 * val * val)).tanh())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::excessive_precision)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the type or truncating it to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            0.5 * val * (1.0 + (val * \u001b[0m\u001b[0m\u001b[38;5;9m0.7978845608\u001b[0m\u001b[0m * (1.0 + 0.044715 * val * val)).tanh())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            0.5 * val * (1.0 + (val * \u001b[0m\u001b[0m\u001b[38;5;10m0.797_884_6\u001b[0m\u001b[0m * (1.0 + 0.044715 * val * val)).tanh())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/autograd/tests.rs","byte_start":97,"byte_end":2842,"line_start":6,"line_end":88,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn assert_vec_near(actual: &[f32], expected: &[f32], tolerance: f32) {","highlight_start":1,"highlight_end":75},{"text":"        assert_eq!(actual.len(), expected.len());","highlight_start":1,"highlight_end":50},{"text":"        for (a, e) in actual.iter().zip(expected.iter()) {","highlight_start":1,"highlight_end":59},{"text":"            assert!((a - e).abs() < tolerance, \"Expected {}, got {}\", e, a);","highlight_start":1,"highlight_end":77},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_backward_01() {","highlight_start":1,"highlight_end":28},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x1 = Tensor::from_array_1d(vec![0.0140f32, 0.5773, 0.0469]);","highlight_start":1,"highlight_end":73},{"text":"        let x2 = Tensor::from_array_1d(vec![0.3232f32, 0.4903, 0.9395]);","highlight_start":1,"highlight_end":73},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let sin_x1 = function::function::sin(&x1);","highlight_start":1,"highlight_end":51},{"text":"        let mul_result = &x1 * &x2;","highlight_start":1,"highlight_end":36},{"text":"        let y = &sin_x1 + &mul_result;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        assert_eq!(y.shape(), vec![3]);","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_backward_02() {","highlight_start":1,"highlight_end":28},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x = Tensor::from_array_2d(vec![vec![1.0f32, -1.0], vec![1.0, 1.0]]);","highlight_start":1,"highlight_end":81},{"text":"        let x_pow = x.pow(&Tensor::scalar(2.0f32));","highlight_start":1,"highlight_end":52},{"text":"        let y = x_pow.sum();","highlight_start":1,"highlight_end":29},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(y.shape(), vec![]);","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_backward_flatten() {","highlight_start":1,"highlight_end":33},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x1 = Tensor::from_array_2d(vec![vec![1.0f32, 2.0], vec![3.0, 4.0]]);","highlight_start":1,"highlight_end":81},{"text":"        let x2 = Tensor::from_array_2d(vec![vec![1.0f32, 2.0], vec![3.0, 4.0]]);","highlight_start":1,"highlight_end":81},{"text":"        let x3 = &x1 * &x2;","highlight_start":1,"highlight_end":28},{"text":"        let y = x3.flatten();","highlight_start":1,"highlight_end":30},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(y.to_list::<f32>(), vec![1.0, 4.0, 9.0, 16.0]);","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_autograd_meta_backward() {","highlight_start":1,"highlight_end":39},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let tensor = Tensor::empty_with_options(&[2, 2], options);","highlight_start":1,"highlight_end":67},{"text":"        let grad = Tensor::ones(&[2, 2]);","highlight_start":1,"highlight_end":42},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        tensor.backward_with_grad(&grad);","highlight_start":1,"highlight_end":42},{"text":"        let retrieved_grad = tensor.grad();","highlight_start":1,"highlight_end":44},{"text":"        assert!(retrieved_grad.defined());","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_gradient_accumulation() {","highlight_start":1,"highlight_end":38},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let tensor = Tensor::empty_with_options(&[2, 2], options);","highlight_start":1,"highlight_end":67},{"text":"        let grad1 = Tensor::ones(&[2, 2]);","highlight_start":1,"highlight_end":43},{"text":"        let grad2 = Tensor::ones(&[2, 2]);","highlight_start":1,"highlight_end":43},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        tensor.backward_with_grad(&grad1);","highlight_start":1,"highlight_end":43},{"text":"        tensor.backward_with_grad(&grad2);","highlight_start":1,"highlight_end":43},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let accumulated_grad = tensor.grad();","highlight_start":1,"highlight_end":46},{"text":"        assert!(accumulated_grad.defined());","highlight_start":1,"highlight_end":45},{"text":"        assert_eq!(accumulated_grad.to_list::<f32>(), vec![2.0, 2.0, 2.0, 2.0]);","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_zero_grad() {","highlight_start":1,"highlight_end":26},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let mut tensor = Tensor::empty_with_options(&[2, 2], options);","highlight_start":1,"highlight_end":71},{"text":"        let grad = Tensor::ones(&[2, 2]);","highlight_start":1,"highlight_end":42},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        tensor.backward_with_grad(&grad);","highlight_start":1,"highlight_end":42},{"text":"        assert!(tensor.grad().defined());","highlight_start":1,"highlight_end":42},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        tensor.zero_grad();","highlight_start":1,"highlight_end":28},{"text":"        assert!(!tensor.grad().defined());","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/autograd/tests.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn assert_vec_near(actual: &[f32], expected: &[f32], tolerance: f32) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"clamp-like pattern without using clamp function","code":{"code":"clippy::manual_clamp","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/loss.rs","byte_start":3555,"byte_end":3585,"line_start":115,"line_end":115,"column_start":32,"column_end":62,"is_primary":true,"text":[{"text":"            let pred_clamped = pred.max(1e-7).min(1.0 - 1e-7);","highlight_start":32,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"clamp will panic if max < min, min.is_nan(), or max.is_nan()","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"clamp returns NaN if the input is NaN","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::manual_clamp)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace with clamp","code":null,"level":"help","spans":[{"file_name":"src/functions/loss.rs","byte_start":3555,"byte_end":3585,"line_start":115,"line_end":115,"column_start":32,"column_end":62,"is_primary":true,"text":[{"text":"            let pred_clamped = pred.max(1e-7).min(1.0 - 1e-7);","highlight_start":32,"highlight_end":62}],"label":null,"suggested_replacement":"pred.clamp(1e-7, 1.0 - 1e-7)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: clamp-like pattern without using clamp function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/loss.rs:115:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let pred_clamped = pred.max(1e-7).min(1.0 - 1e-7);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace with clamp: `pred.clamp(1e-7, 1.0 - 1e-7)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: clamp will panic if max < min, min.is_nan(), or max.is_nan()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: clamp returns NaN if the input is NaN\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_clamp)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function has too many arguments (8/7)","code":{"code":"clippy::too_many_arguments","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/conv.rs","byte_start":7178,"byte_end":7409,"line_start":174,"line_end":183,"column_start":1,"column_end":12,"is_primary":true,"text":[{"text":"pub fn batch_norm2d(","highlight_start":1,"highlight_end":21},{"text":"    input: &Tensor,","highlight_start":1,"highlight_end":20},{"text":"    weight: Option<&Tensor>,","highlight_start":1,"highlight_end":29},{"text":"    bias: Option<&Tensor>,","highlight_start":1,"highlight_end":27},{"text":"    running_mean: Option<&Tensor>,","highlight_start":1,"highlight_end":35},{"text":"    running_var: Option<&Tensor>,","highlight_start":1,"highlight_end":34},{"text":"    training: bool,","highlight_start":1,"highlight_end":20},{"text":"    _momentum: f32,","highlight_start":1,"highlight_end":20},{"text":"    eps: f32,","highlight_start":1,"highlight_end":14},{"text":") -> Tensor {","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::too_many_arguments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many arguments (8/7)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/conv.rs:174:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn batch_norm2d(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    input: &Tensor,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    weight: Option<&Tensor>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    bias: Option<&Tensor>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    eps: f32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Tensor {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::too_many_arguments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":97,"byte_end":10624,"line_start":6,"line_end":293,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn assert_vec_near(actual: &[f32], expected: &[f32], tolerance: f32) {","highlight_start":1,"highlight_end":75},{"text":"        assert_eq!(actual.len(), expected.len());","highlight_start":1,"highlight_end":50},{"text":"        for (a, e) in actual.iter().zip(expected.iter()) {","highlight_start":1,"highlight_end":59},{"text":"            assert!((a - e).abs() < tolerance, \"Expected {}, got {}\", e, a);","highlight_start":1,"highlight_end":77},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_add() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let a = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        let b = Tensor::from_array_1d(vec![4.0f32, 5.0, 6.0]);","highlight_start":1,"highlight_end":63},{"text":"        let y = function::function::add(&a, &b, 0.5);","highlight_start":1,"highlight_end":54},{"text":"        assert_eq!(y.to_list::<f32>(), vec![5.0, 7.0, 9.0]);","highlight_start":1,"highlight_end":61},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_sub() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let a = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        let b = Tensor::from_array_1d(vec![4.0f32, 5.0, 6.0]);","highlight_start":1,"highlight_end":63},{"text":"        let y = function::function::sub(&a, &b);","highlight_start":1,"highlight_end":49},{"text":"        assert_eq!(y.to_list::<f32>(), vec![-3.0, -3.0, -3.0]);","highlight_start":1,"highlight_end":64},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_mul() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let a = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        let b = Tensor::from_array_1d(vec![4.0f32, 5.0, 6.0]);","highlight_start":1,"highlight_end":63},{"text":"        let y = function::function::mul(&a, &b);","highlight_start":1,"highlight_end":49},{"text":"        assert_eq!(y.to_list::<f32>(), vec![4.0, 10.0, 18.0]);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_div() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let a = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        let b = Tensor::from_array_1d(vec![4.0f32, 5.0, 6.0]);","highlight_start":1,"highlight_end":63},{"text":"        let y = function::function::div(&a, &b);","highlight_start":1,"highlight_end":49},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[0.25, 0.4, 0.5], 1e-6);","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_sin() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x = Tensor::from_array_1d(vec![0.0f32, std::f32::consts::PI / 2.0, std::f32::consts::PI]);","highlight_start":1,"highlight_end":103},{"text":"        let y = function::function::sin(&x);","highlight_start":1,"highlight_end":45},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[0.0, 1.0, 0.0], 1e-6);","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_cos() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x = Tensor::from_array_1d(vec![0.0f32, std::f32::consts::PI / 2.0, std::f32::consts::PI]);","highlight_start":1,"highlight_end":103},{"text":"        let y = function::function::cos(&x);","highlight_start":1,"highlight_end":45},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[1.0, 0.0, -1.0], 1e-6);","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_pow() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x1 = Tensor::from_array_1d(vec![2.0f32, 3.0, 4.0]);","highlight_start":1,"highlight_end":64},{"text":"        let x2 = Tensor::from_array_1d(vec![3.0f32, 3.0, 3.0]);","highlight_start":1,"highlight_end":64},{"text":"        let y = function::function::pow(&x1, &x2);","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(y.to_list::<f32>(), vec![8.0, 27.0, 64.0]);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let y_scalar = function::function::pow(&x1, &Tensor::scalar(3.0f32));","highlight_start":1,"highlight_end":78},{"text":"        assert_eq!(y_scalar.to_list::<f32>(), vec![8.0, 27.0, 64.0]);","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_sum() {","highlight_start":1,"highlight_end":25},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":63},{"text":"        let y = function::function::sum(&x);","highlight_start":1,"highlight_end":45},{"text":"        assert_eq!(y.to_list::<f32>(), vec![6.0]);","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_relu() {","highlight_start":1,"highlight_end":26},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x = Tensor::from_array_2d(vec![vec![-1.0f32, 2.0], vec![3.0, -4.0]]);","highlight_start":1,"highlight_end":82},{"text":"        let y = function::function::relu(&x);","highlight_start":1,"highlight_end":46},{"text":"        assert_eq!(y.to_list::<f32>(), vec![0.0, 2.0, 3.0, 0.0]);","highlight_start":1,"highlight_end":66},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_gelu() {","highlight_start":1,"highlight_end":26},{"text":"        let x = Tensor::from_array_1d(vec![-1.0f32, -0.5, 0.5, 1.0]);","highlight_start":1,"highlight_end":70},{"text":"        let y = function::function::gelu(&x);","highlight_start":1,"highlight_end":46},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[-0.1587, -0.1543, 0.3457, 0.8413], 1e-3);","highlight_start":1,"highlight_end":89},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_silu() {","highlight_start":1,"highlight_end":26},{"text":"        let x = Tensor::from_array_1d(vec![-1.0f32, -0.5, 0.5, 1.0]);","highlight_start":1,"highlight_end":70},{"text":"        let y = function::function::silu(&x);","highlight_start":1,"highlight_end":46},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[-0.2689, -0.1888, 0.3112, 0.7311], 1e-3);","highlight_start":1,"highlight_end":89},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_softmax() {","highlight_start":1,"highlight_end":29},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let input = Tensor::from_array_1d(vec![1.1f32, 1.2, 1.3, 1.6]);","highlight_start":1,"highlight_end":72},{"text":"        let output = function::function::softmax(&input, 0);","highlight_start":1,"highlight_end":61},{"text":"        assert_vec_near(&output.to_list::<f32>(), &[0.2010, 0.2221, 0.2455, 0.3314], 1e-3);","highlight_start":1,"highlight_end":92},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_log_softmax() {","highlight_start":1,"highlight_end":33},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let input = Tensor::from_array_1d(vec![1.1f32, 1.2, 1.3, 1.6]);","highlight_start":1,"highlight_end":72},{"text":"        let output = function::function::log_softmax(&input, 0);","highlight_start":1,"highlight_end":65},{"text":"        assert_vec_near(&output.to_list::<f32>(), &[-1.6045, -1.5045, -1.4045, -1.1045], 1e-3);","highlight_start":1,"highlight_end":96},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_mse_loss_none() {","highlight_start":1,"highlight_end":35},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":44},{"text":"            vec![-0.3089f32, 0.5301, -0.0245],","highlight_start":1,"highlight_end":47},{"text":"            vec![1.5852, 0.8954, 0.7485]","highlight_start":1,"highlight_end":41},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let y = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":44},{"text":"            vec![0.8397f32, 1.7990, -0.2738],","highlight_start":1,"highlight_end":46},{"text":"            vec![-0.8910, -0.6746, 0.3419]","highlight_start":1,"highlight_end":43},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let loss = mse_loss(&x, &y, LossReduction::None);","highlight_start":1,"highlight_end":58},{"text":"        assert_vec_near(&loss.to_list::<f32>(), ","highlight_start":1,"highlight_end":49},{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":1,"highlight_end":101},{"text":"                       1e-3);","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_mse_loss_mean() {","highlight_start":1,"highlight_end":35},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let x = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":44},{"text":"            vec![-0.3089f32, 0.5301, -0.0245],","highlight_start":1,"highlight_end":47},{"text":"            vec![1.5852, 0.8954, 0.7485]","highlight_start":1,"highlight_end":41},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let y = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":44},{"text":"            vec![0.8397f32, 1.7990, -0.2738],","highlight_start":1,"highlight_end":46},{"text":"            vec![-0.8910, -0.6746, 0.3419]","highlight_start":1,"highlight_end":43},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let loss = mse_loss(&x, &y, LossReduction::Mean);","highlight_start":1,"highlight_end":58},{"text":"        assert!((loss.item::<f32>() - 1.95888805).abs() < 1e-3);","highlight_start":1,"highlight_end":65},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_nll_loss() {","highlight_start":1,"highlight_end":30},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let input = Tensor::from_array_2d(vec![vec![0.1f32, 0.2, 0.7], vec![0.3, 0.4, 0.3]]);","highlight_start":1,"highlight_end":94},{"text":"        let target = Tensor::from_array_1d(vec![2i64, 1]);","highlight_start":1,"highlight_end":59},{"text":"        let loss = nll_loss(&input, &target, LossReduction::None);","highlight_start":1,"highlight_end":67},{"text":"        assert_vec_near(&loss.to_list::<f32>(), &[-0.7, -0.4], 1e-6);","highlight_start":1,"highlight_end":70},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_dropout() {","highlight_start":1,"highlight_end":29},{"text":"        let options = Options::new().requires_grad(true);","highlight_start":1,"highlight_end":58},{"text":"        let input = Tensor::ones(&[100, 10]);","highlight_start":1,"highlight_end":46},{"text":"        let p = 0.3f32;","highlight_start":1,"highlight_end":24},{"text":"        let output = dropout(&input, p, true);","highlight_start":1,"highlight_end":47},{"text":"        assert_eq!(output.shape(), input.shape());","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let output_no_training = dropout(&input, p, false);","highlight_start":1,"highlight_end":60},{"text":"        assert_eq!(output_no_training.to_list::<f32>(), input.to_list::<f32>());","highlight_start":1,"highlight_end":81},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_tanh() {","highlight_start":1,"highlight_end":26},{"text":"        let x = Tensor::from_array_1d(vec![-2.0f32, -1.0, 0.0, 1.0, 2.0]);","highlight_start":1,"highlight_end":75},{"text":"        let y = function::function::tanh(&x);","highlight_start":1,"highlight_end":46},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[-0.9640, -0.7616, 0.0, 0.7616, 0.9640], 1e-3);","highlight_start":1,"highlight_end":94},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_sigmoid() {","highlight_start":1,"highlight_end":29},{"text":"        let x = Tensor::from_array_1d(vec![-2.0f32, -1.0, 0.0, 1.0, 2.0]);","highlight_start":1,"highlight_end":75},{"text":"        let y = function::function::sigmoid(&x);","highlight_start":1,"highlight_end":49},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[0.1192, 0.2689, 0.5, 0.7311, 0.8808], 1e-3);","highlight_start":1,"highlight_end":92},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_leaky_relu() {","highlight_start":1,"highlight_end":32},{"text":"        let x = Tensor::from_array_1d(vec![-2.0f32, -1.0, 0.0, 1.0, 2.0]);","highlight_start":1,"highlight_end":75},{"text":"        let y = function::function::leaky_relu(&x, 0.01);","highlight_start":1,"highlight_end":58},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[-0.02, -0.01, 0.0, 1.0, 2.0], 1e-6);","highlight_start":1,"highlight_end":84},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_swish() {","highlight_start":1,"highlight_end":27},{"text":"        let x = Tensor::from_array_1d(vec![-1.0f32, -0.5, 0.0, 0.5, 1.0]);","highlight_start":1,"highlight_end":75},{"text":"        let y = function::function::swish(&x);","highlight_start":1,"highlight_end":47},{"text":"        assert_vec_near(&y.to_list::<f32>(), &[-0.2689, -0.1888, 0.0, 0.3112, 0.7311], 1e-3);","highlight_start":1,"highlight_end":94},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_cross_entropy_loss() {","highlight_start":1,"highlight_end":40},{"text":"        let input = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":48},{"text":"            vec![2.0f32, 1.0, 0.1],","highlight_start":1,"highlight_end":36},{"text":"            vec![0.5, 2.0, 0.3]","highlight_start":1,"highlight_end":32},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let target = Tensor::from_array_1d(vec![0i64, 1]);","highlight_start":1,"highlight_end":59},{"text":"        let loss = cross_entropy_loss(&input, &target, LossReduction::Mean);","highlight_start":1,"highlight_end":77},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(loss.item::<f32>() > 0.0);","highlight_start":1,"highlight_end":43},{"text":"        assert!(loss.item::<f32>() < 5.0); // Reasonable upper bound","highlight_start":1,"highlight_end":69},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_bce_loss() {","highlight_start":1,"highlight_end":30},{"text":"        let input = Tensor::from_array_1d(vec![0.8f32, 0.2, 0.9, 0.1]);","highlight_start":1,"highlight_end":72},{"text":"        let target = Tensor::from_array_1d(vec![1.0f32, 0.0, 1.0, 0.0]);","highlight_start":1,"highlight_end":73},{"text":"        let loss = bce_loss(&input, &target, LossReduction::Mean);","highlight_start":1,"highlight_end":67},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(loss.item::<f32>() > 0.0);","highlight_start":1,"highlight_end":43},{"text":"        assert!(loss.item::<f32>() < 1.0);","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_l1_loss() {","highlight_start":1,"highlight_end":29},{"text":"        let input = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0, 4.0]);","highlight_start":1,"highlight_end":72},{"text":"        let target = Tensor::from_array_1d(vec![1.5f32, 1.8, 3.2, 3.9]);","highlight_start":1,"highlight_end":73},{"text":"        let loss = l1_loss(&input, &target, LossReduction::None);","highlight_start":1,"highlight_end":66},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_vec_near(&loss.to_list::<f32>(), &[0.5, 0.2, 0.2, 0.1], 1e-6);","highlight_start":1,"highlight_end":78},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loss_mean = l1_loss(&input, &target, LossReduction::Mean);","highlight_start":1,"highlight_end":71},{"text":"        assert_vec_near(&[loss_mean.item::<f32>()], &[0.25], 1e-6);","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_conv2d_basic() {","highlight_start":1,"highlight_end":34},{"text":"        let input = Tensor::from_array_4d(vec![vec![vec![","highlight_start":1,"highlight_end":58},{"text":"            vec![1.0f32, 2.0, 3.0],","highlight_start":1,"highlight_end":36},{"text":"            vec![4.0, 5.0, 6.0],","highlight_start":1,"highlight_end":33},{"text":"            vec![7.0, 8.0, 9.0]","highlight_start":1,"highlight_end":32},{"text":"        ]]]);","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let weight = Tensor::from_array_4d(vec![vec![vec![","highlight_start":1,"highlight_end":59},{"text":"            vec![1.0f32, 0.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![0.0, 1.0]","highlight_start":1,"highlight_end":27},{"text":"        ]]]);","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let output = conv2d(&input, &weight, None, (1, 1), (0, 0), (1, 1));","highlight_start":1,"highlight_end":76},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(output.defined());","highlight_start":1,"highlight_end":35},{"text":"        assert_eq!(output.shape(), vec![1, 1, 2, 2]);","highlight_start":1,"highlight_end":54},{"text":"        assert_eq!(output.to_list::<f32>(), vec![6.0, 8.0, 12.0, 14.0]);","highlight_start":1,"highlight_end":73},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_max_pool2d_basic() {","highlight_start":1,"highlight_end":38},{"text":"        let input = Tensor::from_array_4d(vec![vec![vec![","highlight_start":1,"highlight_end":58},{"text":"            vec![1.0f32, 2.0, 3.0, 4.0],","highlight_start":1,"highlight_end":41},{"text":"            vec![5.0, 6.0, 7.0, 8.0],","highlight_start":1,"highlight_end":38},{"text":"            vec![9.0, 10.0, 11.0, 12.0],","highlight_start":1,"highlight_end":41},{"text":"            vec![13.0, 14.0, 15.0, 16.0]","highlight_start":1,"highlight_end":41},{"text":"        ]]]);","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let output = max_pool2d(&input, (2, 2), None, (0, 0));","highlight_start":1,"highlight_end":63},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(output.defined());","highlight_start":1,"highlight_end":35},{"text":"        assert_eq!(output.shape(), vec![1, 1, 2, 2]);","highlight_start":1,"highlight_end":54},{"text":"        assert_eq!(output.to_list::<f32>(), vec![6.0, 8.0, 14.0, 16.0]);","highlight_start":1,"highlight_end":73},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_func_batch_norm2d_basic() {","highlight_start":1,"highlight_end":40},{"text":"        let input = Tensor::from_array_4d(vec![vec![vec![","highlight_start":1,"highlight_end":58},{"text":"            vec![1.0f32, 2.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![3.0, 4.0]","highlight_start":1,"highlight_end":27},{"text":"        ]]]);","highlight_start":1,"highlight_end":14},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let output = batch_norm2d(&input, None, None, None, None, true, 0.1, 1e-5);","highlight_start":1,"highlight_end":84},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(output.defined());","highlight_start":1,"highlight_end":35},{"text":"        assert_eq!(output.shape(), vec![1, 1, 2, 2]);","highlight_start":1,"highlight_end":54},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let output_data = output.to_list::<f32>();","highlight_start":1,"highlight_end":51},{"text":"        assert!(output_data.iter().all(|&x| x.is_finite()));","highlight_start":1,"highlight_end":61},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:6:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn assert_vec_near(actual: &[f32], expected: &[f32], tolerance: f32) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float has excessive precision","code":{"code":"clippy::excessive_precision","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5170,"byte_end":5180,"line_start":139,"line_end":139,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":26,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider changing the type or truncating it to","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5170,"byte_end":5180,"line_start":139,"line_end":139,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":26,"highlight_end":36}],"label":null,"suggested_replacement":"1.319_281_9","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: float has excessive precision\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:139:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the type or truncating it to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                       &[\u001b[0m\u001b[0m\u001b[38;5;9m1.31928194\u001b[0m\u001b[0m, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                       &[\u001b[0m\u001b[0m\u001b[38;5;10m1.319_281_9\u001b[0m\u001b[0m, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float has excessive precision","code":{"code":"clippy::excessive_precision","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5193,"byte_end":5205,"line_start":139,"line_end":139,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":49,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider changing the type or truncating it to","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5193,"byte_end":5205,"line_start":139,"line_end":139,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":49,"highlight_end":61}],"label":null,"suggested_replacement":"0.062_150_486","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: float has excessive precision\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:139:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the type or truncating it to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, \u001b[0m\u001b[0m\u001b[38;5;9m0.0621504858\u001b[0m\u001b[0m, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, \u001b[0m\u001b[0m\u001b[38;5;10m0.062_150_486\u001b[0m\u001b[0m, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float has excessive precision","code":{"code":"clippy::excessive_precision","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5207,"byte_end":5217,"line_start":139,"line_end":139,"column_start":63,"column_end":73,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":63,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider changing the type or truncating it to","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5207,"byte_end":5217,"line_start":139,"line_end":139,"column_start":63,"column_end":73,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":63,"highlight_end":73}],"label":null,"suggested_replacement":"6.131_565_6","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: float has excessive precision\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:139:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the type or truncating it to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, \u001b[0m\u001b[0m\u001b[38;5;9m6.13156557\u001b[0m\u001b[0m, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, \u001b[0m\u001b[0m\u001b[38;5;10m6.131_565_6\u001b[0m\u001b[0m, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float has excessive precision","code":{"code":"clippy::excessive_precision","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5219,"byte_end":5229,"line_start":139,"line_end":139,"column_start":75,"column_end":85,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":75,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider changing the type or truncating it to","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5219,"byte_end":5229,"line_start":139,"line_end":139,"column_start":75,"column_end":85,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":75,"highlight_end":85}],"label":null,"suggested_replacement":"2.464_899_8","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: float has excessive precision\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:139:75\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the type or truncating it to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, \u001b[0m\u001b[0m\u001b[38;5;9m2.46489978\u001b[0m\u001b[0m, 0.165323555], \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, \u001b[0m\u001b[0m\u001b[38;5;10m2.464_899_8\u001b[0m\u001b[0m, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float has excessive precision","code":{"code":"clippy::excessive_precision","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5231,"byte_end":5242,"line_start":139,"line_end":139,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider changing the type or truncating it to","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5231,"byte_end":5242,"line_start":139,"line_end":139,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], ","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"0.165_323_56","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: float has excessive precision\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:139:87\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, 0.165323555], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the type or truncating it to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, \u001b[0m\u001b[0m\u001b[38;5;9m0.165323555\u001b[0m\u001b[0m], \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                       &[1.31928194, 1.6101073, 0.0621504858, 6.13156557, 2.46489978, \u001b[0m\u001b[0m\u001b[38;5;10m0.165_323_56\u001b[0m\u001b[0m], \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"float has excessive precision","code":{"code":"clippy::excessive_precision","explanation":null},"level":"warning","spans":[{"file_name":"src/functions/tests.rs","byte_start":5773,"byte_end":5783,"line_start":155,"line_end":155,"column_start":39,"column_end":49,"is_primary":true,"text":[{"text":"        assert!((loss.item::<f32>() - 1.95888805).abs() < 1e-3);","highlight_start":39,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider changing the type or truncating it to","code":null,"level":"help","spans":[{"file_name":"src/functions/tests.rs","byte_start":5773,"byte_end":5783,"line_start":155,"line_end":155,"column_start":39,"column_end":49,"is_primary":true,"text":[{"text":"        assert!((loss.item::<f32>() - 1.95888805).abs() < 1e-3);","highlight_start":39,"highlight_end":49}],"label":null,"suggested_replacement":"1.958_888","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: float has excessive precision\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/functions/tests.rs:155:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        assert!((loss.item::<f32>() - 1.95888805).abs() < 1e-3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider changing the type or truncating it to\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        assert!((loss.item::<f32>() - \u001b[0m\u001b[0m\u001b[38;5;9m1.95888805\u001b[0m\u001b[0m).abs() < 1e-3);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        assert!((loss.item::<f32>() - \u001b[0m\u001b[0m\u001b[38;5;10m1.958_888\u001b[0m\u001b[0m).abs() < 1e-3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/optimizers/tests.rs","byte_start":66,"byte_end":6151,"line_start":5,"line_end":202,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_sgd_creation() {","highlight_start":1,"highlight_end":29},{"text":"        let params = vec![","highlight_start":1,"highlight_end":27},{"text":"            Tensor::ones(&[2, 3]),","highlight_start":1,"highlight_end":35},{"text":"            Tensor::zeros(&[1, 5]),","highlight_start":1,"highlight_end":36},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let config = SGDConfig::new(0.01);","highlight_start":1,"highlight_end":43},{"text":"        let optimizer = SGD::new(params, config);","highlight_start":1,"highlight_end":50},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.param_groups().len(), 1);","highlight_start":1,"highlight_end":55},{"text":"        assert_eq!(optimizer.param_groups()[0].len(), 2);","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_sgd_with_momentum() {","highlight_start":1,"highlight_end":34},{"text":"        let params = vec![Tensor::ones(&[2, 2])];","highlight_start":1,"highlight_end":50},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let config = SGDConfig::new(0.1)","highlight_start":1,"highlight_end":41},{"text":"            .momentum(0.9)","highlight_start":1,"highlight_end":27},{"text":"            .weight_decay(0.01);","highlight_start":1,"highlight_end":33},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let optimizer = SGD::new(params, config);","highlight_start":1,"highlight_end":50},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.config().lr, 0.1);","highlight_start":1,"highlight_end":48},{"text":"        assert_eq!(optimizer.config().momentum, 0.9);","highlight_start":1,"highlight_end":54},{"text":"        assert_eq!(optimizer.config().weight_decay, 0.01);","highlight_start":1,"highlight_end":59},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_adam_creation() {","highlight_start":1,"highlight_end":30},{"text":"        let params = vec![","highlight_start":1,"highlight_end":27},{"text":"            Tensor::randn(&[3, 3]),","highlight_start":1,"highlight_end":36},{"text":"            Tensor::ones(&[1]),","highlight_start":1,"highlight_end":32},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let config = AdamConfig::new(0.001);","highlight_start":1,"highlight_end":45},{"text":"        let optimizer = Adam::new(params, config);","highlight_start":1,"highlight_end":51},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.param_groups().len(), 1);","highlight_start":1,"highlight_end":55},{"text":"        assert_eq!(optimizer.param_groups()[0].len(), 2);","highlight_start":1,"highlight_end":58},{"text":"        assert_eq!(optimizer.step_count(), 0);","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_adam_with_custom_config() {","highlight_start":1,"highlight_end":40},{"text":"        let params = vec![Tensor::zeros(&[2, 2])];","highlight_start":1,"highlight_end":51},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let config = AdamConfig::new(0.002)","highlight_start":1,"highlight_end":44},{"text":"            .betas(0.8, 0.99)","highlight_start":1,"highlight_end":30},{"text":"            .eps(1e-6)","highlight_start":1,"highlight_end":23},{"text":"            .weight_decay(0.1);","highlight_start":1,"highlight_end":32},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let optimizer = Adam::new(params, config);","highlight_start":1,"highlight_end":51},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.config().lr, 0.002);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(optimizer.config().beta1, 0.8);","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(optimizer.config().beta2, 0.99);","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(optimizer.config().eps, 1e-6);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(optimizer.config().weight_decay, 0.1);","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_optimizer_trait_sgd() {","highlight_start":1,"highlight_end":36},{"text":"        let params = vec![Tensor::ones(&[2, 2])];","highlight_start":1,"highlight_end":50},{"text":"        let mut optimizer = SGD::with_lr(params, 0.01);","highlight_start":1,"highlight_end":56},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.zero_grad();","highlight_start":1,"highlight_end":31},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.step();","highlight_start":1,"highlight_end":26},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let new_params = vec![Tensor::zeros(&[1, 3])];","highlight_start":1,"highlight_end":55},{"text":"        optimizer.add_param_group(new_params);","highlight_start":1,"highlight_end":47},{"text":"        assert_eq!(optimizer.param_groups().len(), 2);","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_optimizer_trait_adam() {","highlight_start":1,"highlight_end":37},{"text":"        let params = vec![Tensor::randn(&[3, 2])];","highlight_start":1,"highlight_end":51},{"text":"        let mut optimizer = Adam::with_lr(params, 0.001);","highlight_start":1,"highlight_end":58},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.zero_grad();","highlight_start":1,"highlight_end":31},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.step();","highlight_start":1,"highlight_end":26},{"text":"        assert_eq!(optimizer.step_count(), 1);","highlight_start":1,"highlight_end":47},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let new_params = vec![Tensor::ones(&[2, 1])];","highlight_start":1,"highlight_end":54},{"text":"        optimizer.add_param_group(new_params);","highlight_start":1,"highlight_end":47},{"text":"        assert_eq!(optimizer.param_groups().len(), 2);","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_sgd_parameter_update_simulation() {","highlight_start":1,"highlight_end":48},{"text":"        let mut param = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":71},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let params = vec![param.clone()];","highlight_start":1,"highlight_end":42},{"text":"        let mut optimizer = SGD::with_lr(params, 0.1);","highlight_start":1,"highlight_end":55},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.step();","highlight_start":1,"highlight_end":26},{"text":"        optimizer.zero_grad();","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_adam_parameter_update_simulation() {","highlight_start":1,"highlight_end":49},{"text":"        let param = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":48},{"text":"            vec![0.5f32, -0.2],","highlight_start":1,"highlight_end":32},{"text":"            vec![1.0, 0.8]","highlight_start":1,"highlight_end":27},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let params = vec![param];","highlight_start":1,"highlight_end":34},{"text":"        let mut optimizer = Adam::with_lr(params, 0.001);","highlight_start":1,"highlight_end":58},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.step();","highlight_start":1,"highlight_end":26},{"text":"        assert_eq!(optimizer.step_count(), 1);","highlight_start":1,"highlight_end":47},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.step();","highlight_start":1,"highlight_end":26},{"text":"        assert_eq!(optimizer.step_count(), 2);","highlight_start":1,"highlight_end":47},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.zero_grad();","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_adamw_creation() {","highlight_start":1,"highlight_end":31},{"text":"        let params = vec![","highlight_start":1,"highlight_end":27},{"text":"            Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]),","highlight_start":1,"highlight_end":59},{"text":"            Tensor::from_array_2d(vec![vec![4.0f32, 5.0], vec![6.0, 7.0]]),","highlight_start":1,"highlight_end":76},{"text":"        ];","highlight_start":1,"highlight_end":11},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let config = AdamWConfig::new(0.001)","highlight_start":1,"highlight_end":45},{"text":"            .betas(0.9, 0.999)","highlight_start":1,"highlight_end":31},{"text":"            .eps(1e-8)","highlight_start":1,"highlight_end":23},{"text":"            .weight_decay(0.01);","highlight_start":1,"highlight_end":33},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let optimizer = AdamW::new(params, config);","highlight_start":1,"highlight_end":52},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.config().lr, 0.001);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(optimizer.config().beta1, 0.9);","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(optimizer.config().beta2, 0.999);","highlight_start":1,"highlight_end":53},{"text":"        assert_eq!(optimizer.config().eps, 1e-8);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(optimizer.config().weight_decay, 0.01);","highlight_start":1,"highlight_end":59},{"text":"        assert_eq!(optimizer.step_count(), 0);","highlight_start":1,"highlight_end":47},{"text":"        assert_eq!(optimizer.param_groups().len(), 1);","highlight_start":1,"highlight_end":55},{"text":"        assert_eq!(optimizer.param_groups()[0].len(), 2);","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_adamw_with_lr() {","highlight_start":1,"highlight_end":30},{"text":"        let params = vec![Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0])];","highlight_start":1,"highlight_end":74},{"text":"        let optimizer = AdamW::with_lr(params, 0.01);","highlight_start":1,"highlight_end":54},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.config().lr, 0.01);","highlight_start":1,"highlight_end":49},{"text":"        assert_eq!(optimizer.config().beta1, 0.9);","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(optimizer.config().beta2, 0.999);","highlight_start":1,"highlight_end":53},{"text":"        assert_eq!(optimizer.config().eps, 1e-8);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(optimizer.config().weight_decay, 0.01);","highlight_start":1,"highlight_end":59},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_adamw_parameter_update_simulation() {","highlight_start":1,"highlight_end":50},{"text":"        let param = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":67},{"text":"        let mut optimizer = AdamW::with_lr(vec![param], 0.01);","highlight_start":1,"highlight_end":63},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.step();","highlight_start":1,"highlight_end":26},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.step_count(), 1);","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_adamw_with_custom_config() {","highlight_start":1,"highlight_end":41},{"text":"        let params = vec![Tensor::from_array_1d(vec![1.0f32, 2.0])];","highlight_start":1,"highlight_end":69},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let config = AdamWConfig::new(0.002)","highlight_start":1,"highlight_end":45},{"text":"            .betas(0.95, 0.9999)","highlight_start":1,"highlight_end":33},{"text":"            .eps(1e-7)","highlight_start":1,"highlight_end":23},{"text":"            .weight_decay(0.05);","highlight_start":1,"highlight_end":33},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let optimizer = AdamW::new(params, config);","highlight_start":1,"highlight_end":52},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(optimizer.config().lr, 0.002);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(optimizer.config().beta1, 0.95);","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(optimizer.config().beta2, 0.9999);","highlight_start":1,"highlight_end":54},{"text":"        assert_eq!(optimizer.config().eps, 1e-7);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(optimizer.config().weight_decay, 0.05);","highlight_start":1,"highlight_end":59},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_optimizer_trait_adamw() {","highlight_start":1,"highlight_end":38},{"text":"        let param = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":67},{"text":"        let mut optimizer: Box<dyn Optimizer> = Box::new(AdamW::with_lr(vec![param], 0.01));","highlight_start":1,"highlight_end":93},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        optimizer.step();","highlight_start":1,"highlight_end":26},{"text":"        optimizer.zero_grad();","highlight_start":1,"highlight_end":31},{"text":"        optimizer.add_param_group(vec![Tensor::from_array_1d(vec![4.0f32, 5.0])]);","highlight_start":1,"highlight_end":83},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/optimizers/tests.rs:5:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[test]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"length comparison to one","code":{"code":"clippy::len_zero","explanation":null},"level":"warning","spans":[{"file_name":"src/data/dataset.rs","byte_start":1686,"byte_end":1709,"line_start":61,"line_end":61,"column_start":40,"column_end":63,"is_primary":true,"text":[{"text":"        if features_shape.len() < 2 || targets_shape.len() < 1 {","highlight_start":40,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::len_zero)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"using `is_empty` is clearer and more explicit","code":null,"level":"help","spans":[{"file_name":"src/data/dataset.rs","byte_start":1686,"byte_end":1709,"line_start":61,"line_end":61,"column_start":40,"column_end":63,"is_primary":true,"text":[{"text":"        if features_shape.len() < 2 || targets_shape.len() < 1 {","highlight_start":40,"highlight_end":63}],"label":null,"suggested_replacement":"targets_shape.is_empty()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: length comparison to one\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/data/dataset.rs:61:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if features_shape.len() < 2 || targets_shape.len() < 1 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: using `is_empty` is clearer and more explicit: `targets_shape.is_empty()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::len_zero)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/data/tests.rs","byte_start":55,"byte_end":5648,"line_start":5,"line_end":165,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_tensor_dataset_creation() {","highlight_start":1,"highlight_end":40},{"text":"        let features = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":51},{"text":"            vec![1.0f32, 2.0, 3.0],","highlight_start":1,"highlight_end":36},{"text":"            vec![4.0, 5.0, 6.0],","highlight_start":1,"highlight_end":33},{"text":"            vec![7.0, 8.0, 9.0],","highlight_start":1,"highlight_end":33},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let targets = Tensor::from_array_1d(vec![0.0f32, 1.0, 2.0]);","highlight_start":1,"highlight_end":69},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let dataset = TensorDataset::new(features, targets).unwrap();","highlight_start":1,"highlight_end":70},{"text":"        assert_eq!(dataset.len(), 3);","highlight_start":1,"highlight_end":38},{"text":"        assert!(!dataset.is_empty());","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_tensor_dataset_get_item() {","highlight_start":1,"highlight_end":40},{"text":"        let features = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":51},{"text":"            vec![1.0f32, 2.0, 3.0],","highlight_start":1,"highlight_end":36},{"text":"            vec![4.0, 5.0, 6.0],","highlight_start":1,"highlight_end":33},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let targets = Tensor::from_array_1d(vec![0.0f32, 1.0]);","highlight_start":1,"highlight_end":64},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let dataset = TensorDataset::new(features, targets).unwrap();","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let (feature, target) = dataset.get_item(0).unwrap();","highlight_start":1,"highlight_end":62},{"text":"        assert_eq!(feature.shape(), vec![3]);","highlight_start":1,"highlight_end":46},{"text":"        assert_eq!(feature.to_list::<f32>(), vec![1.0, 2.0, 3.0]);","highlight_start":1,"highlight_end":67},{"text":"        assert_eq!(target.to_list::<f32>(), vec![0.0]);","highlight_start":1,"highlight_end":56},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let (feature, target) = dataset.get_item(1).unwrap();","highlight_start":1,"highlight_end":62},{"text":"        assert_eq!(feature.to_list::<f32>(), vec![4.0, 5.0, 6.0]);","highlight_start":1,"highlight_end":67},{"text":"        assert_eq!(target.to_list::<f32>(), vec![1.0]);","highlight_start":1,"highlight_end":56},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(dataset.get_item(2).is_none());","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_tensor_dataset_mismatched_lengths() {","highlight_start":1,"highlight_end":50},{"text":"        let features = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":51},{"text":"            vec![1.0f32, 2.0, 3.0],","highlight_start":1,"highlight_end":36},{"text":"            vec![4.0, 5.0, 6.0],","highlight_start":1,"highlight_end":33},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let targets = Tensor::from_array_1d(vec![0.0f32]);","highlight_start":1,"highlight_end":59},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let result = TensorDataset::new(features, targets);","highlight_start":1,"highlight_end":60},{"text":"        assert!(result.is_err());","highlight_start":1,"highlight_end":34},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_in_memory_dataset() {","highlight_start":1,"highlight_end":34},{"text":"        let mut dataset = InMemoryDataset::new();","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(dataset.len(), 0);","highlight_start":1,"highlight_end":38},{"text":"        assert!(dataset.is_empty());","highlight_start":1,"highlight_end":37},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let feature1 = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":70},{"text":"        let target1 = Tensor::scalar(0.0f32);","highlight_start":1,"highlight_end":46},{"text":"        dataset.add_sample(feature1, target1);","highlight_start":1,"highlight_end":47},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let feature2 = Tensor::from_array_1d(vec![4.0f32, 5.0, 6.0]);","highlight_start":1,"highlight_end":70},{"text":"        let target2 = Tensor::scalar(1.0f32);","highlight_start":1,"highlight_end":46},{"text":"        dataset.add_sample(feature2, target2);","highlight_start":1,"highlight_end":47},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(dataset.len(), 2);","highlight_start":1,"highlight_end":38},{"text":"        assert!(!dataset.is_empty());","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let (feature, target) = dataset.get_item(0).unwrap();","highlight_start":1,"highlight_end":62},{"text":"        assert_eq!(feature.to_list::<f32>(), vec![1.0, 2.0, 3.0]);","highlight_start":1,"highlight_end":67},{"text":"        assert_eq!(target.to_list::<f32>(), vec![0.0]);","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_dataloader_basic() {","highlight_start":1,"highlight_end":33},{"text":"        let features = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":51},{"text":"            vec![1.0f32, 2.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![3.0, 4.0],","highlight_start":1,"highlight_end":28},{"text":"            vec![5.0, 6.0],","highlight_start":1,"highlight_end":28},{"text":"            vec![7.0, 8.0],","highlight_start":1,"highlight_end":28},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let targets = Tensor::from_array_1d(vec![0.0f32, 1.0, 0.0, 1.0]);","highlight_start":1,"highlight_end":74},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let dataset = TensorDataset::new(features, targets).unwrap();","highlight_start":1,"highlight_end":70},{"text":"        let mut dataloader = DataLoader::new(dataset, 2);","highlight_start":1,"highlight_end":58},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(dataloader.len(), 2);","highlight_start":1,"highlight_end":41},{"text":"        assert!(!dataloader.is_empty());","highlight_start":1,"highlight_end":41},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let (batch_features, batch_targets) = dataloader.next_batch().unwrap();","highlight_start":1,"highlight_end":80},{"text":"        assert_eq!(batch_features.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":56},{"text":"        assert_eq!(batch_targets.shape(), vec![2]);","highlight_start":1,"highlight_end":52},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let (batch_features, batch_targets) = dataloader.next_batch().unwrap();","highlight_start":1,"highlight_end":80},{"text":"        assert_eq!(batch_features.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":56},{"text":"        assert_eq!(batch_targets.shape(), vec![2]);","highlight_start":1,"highlight_end":52},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(dataloader.next_batch().is_none());","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_dataloader_drop_last() {","highlight_start":1,"highlight_end":37},{"text":"        let features = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":51},{"text":"            vec![1.0f32, 2.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![3.0, 4.0],","highlight_start":1,"highlight_end":28},{"text":"            vec![5.0, 6.0],","highlight_start":1,"highlight_end":28},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let targets = Tensor::from_array_1d(vec![0.0f32, 1.0, 0.0]);","highlight_start":1,"highlight_end":69},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let dataset = TensorDataset::new(features, targets).unwrap();","highlight_start":1,"highlight_end":70},{"text":"        let mut dataloader = DataLoader::new(dataset, 2).drop_last(true);","highlight_start":1,"highlight_end":74},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(dataloader.len(), 1);","highlight_start":1,"highlight_end":41},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let (batch_features, batch_targets) = dataloader.next_batch().unwrap();","highlight_start":1,"highlight_end":80},{"text":"        assert_eq!(batch_features.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":56},{"text":"        assert_eq!(batch_targets.shape(), vec![2]);","highlight_start":1,"highlight_end":52},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert!(dataloader.next_batch().is_none());","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_dataloader_iterator() {","highlight_start":1,"highlight_end":36},{"text":"        let features = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":51},{"text":"            vec![1.0f32, 2.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![3.0, 4.0],","highlight_start":1,"highlight_end":28},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let targets = Tensor::from_array_1d(vec![0.0f32, 1.0]);","highlight_start":1,"highlight_end":64},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let dataset = TensorDataset::new(features, targets).unwrap();","highlight_start":1,"highlight_end":70},{"text":"        let dataloader = DataLoader::new(dataset, 1);","highlight_start":1,"highlight_end":54},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let batches: Vec<_> = dataloader.collect();","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(batches.len(), 2);","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let (features, targets) = &batches[0];","highlight_start":1,"highlight_end":47},{"text":"        assert_eq!(features.shape(), vec![1, 2]);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(targets.shape(), vec![1]);","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_dataloader_reset() {","highlight_start":1,"highlight_end":33},{"text":"        let features = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":51},{"text":"            vec![1.0f32, 2.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![3.0, 4.0],","highlight_start":1,"highlight_end":28},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let targets = Tensor::from_array_1d(vec![0.0f32, 1.0]);","highlight_start":1,"highlight_end":64},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let dataset = TensorDataset::new(features, targets).unwrap();","highlight_start":1,"highlight_end":70},{"text":"        let mut dataloader = DataLoader::new(dataset, 1);","highlight_start":1,"highlight_end":58},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let _batch1 = dataloader.next_batch().unwrap();","highlight_start":1,"highlight_end":56},{"text":"        let _batch2 = dataloader.next_batch().unwrap();","highlight_start":1,"highlight_end":56},{"text":"        assert!(dataloader.next_batch().is_none());","highlight_start":1,"highlight_end":52},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        dataloader.reset();","highlight_start":1,"highlight_end":28},{"text":"        let _batch1 = dataloader.next_batch().unwrap();","highlight_start":1,"highlight_end":56},{"text":"        let _batch2 = dataloader.next_batch().unwrap();","highlight_start":1,"highlight_end":56},{"text":"        assert!(dataloader.next_batch().is_none());","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/data/tests.rs:5:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[test]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"module has the same name as its containing module","code":{"code":"clippy::module_inception","explanation":null},"level":"warning","spans":[{"file_name":"src/serialization/tests.rs","byte_start":68,"byte_end":8085,"line_start":6,"line_end":221,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn cleanup_test_file(path: &str) {","highlight_start":1,"highlight_end":39},{"text":"        let _ = fs::remove_file(path);","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_model_state_creation() {","highlight_start":1,"highlight_end":37},{"text":"        let mut state = ModelState::new();","highlight_start":1,"highlight_end":43},{"text":"        assert_eq!(state.num_parameters(), 0);","highlight_start":1,"highlight_end":47},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let tensor = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":68},{"text":"        state.add_parameter(\"weight\".to_string(), tensor);","highlight_start":1,"highlight_end":59},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(state.num_parameters(), 1);","highlight_start":1,"highlight_end":47},{"text":"        assert!(state.get_parameter(\"weight\").is_some());","highlight_start":1,"highlight_end":58},{"text":"        assert!(state.get_parameter(\"bias\").is_none());","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_model_state_metadata() {","highlight_start":1,"highlight_end":37},{"text":"        let mut state = ModelState::new();","highlight_start":1,"highlight_end":43},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        state.add_metadata(\"model_type\".to_string(), \"linear\".to_string());","highlight_start":1,"highlight_end":76},{"text":"        state.add_metadata(\"version\".to_string(), \"1.0\".to_string());","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(state.get_metadata(\"model_type\"), Some(&\"linear\".to_string()));","highlight_start":1,"highlight_end":83},{"text":"        assert_eq!(state.get_metadata(\"version\"), Some(&\"1.0\".to_string()));","highlight_start":1,"highlight_end":77},{"text":"        assert_eq!(state.get_metadata(\"nonexistent\"), None);","highlight_start":1,"highlight_end":61},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_model_state_parameter_operations() {","highlight_start":1,"highlight_end":49},{"text":"        let mut state = ModelState::new();","highlight_start":1,"highlight_end":43},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let weight = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":49},{"text":"            vec![1.0f32, 2.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![3.0, 4.0],","highlight_start":1,"highlight_end":28},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let bias = Tensor::from_array_1d(vec![0.1f32, 0.2]);","highlight_start":1,"highlight_end":61},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        state.add_parameter(\"weight\".to_string(), weight);","highlight_start":1,"highlight_end":59},{"text":"        state.add_parameter(\"bias\".to_string(), bias);","highlight_start":1,"highlight_end":55},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let names = state.parameter_names();","highlight_start":1,"highlight_end":45},{"text":"        assert_eq!(names.len(), 2);","highlight_start":1,"highlight_end":36},{"text":"        assert!(names.contains(&&\"weight\".to_string()));","highlight_start":1,"highlight_end":57},{"text":"        assert!(names.contains(&&\"bias\".to_string()));","highlight_start":1,"highlight_end":55},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let removed = state.remove_parameter(\"weight\");","highlight_start":1,"highlight_end":56},{"text":"        assert!(removed.is_some());","highlight_start":1,"highlight_end":36},{"text":"        assert_eq!(state.num_parameters(), 1);","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_model_state_save_load() {","highlight_start":1,"highlight_end":38},{"text":"        let test_file = \"test_model_state.bin\";","highlight_start":1,"highlight_end":48},{"text":"        cleanup_test_file(test_file);","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let mut original_state = ModelState::new();","highlight_start":1,"highlight_end":52},{"text":"        original_state.add_metadata(\"model_type\".to_string(), \"test\".to_string());","highlight_start":1,"highlight_end":83},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let weight = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":49},{"text":"            vec![1.0f32, 2.0, 3.0],","highlight_start":1,"highlight_end":36},{"text":"            vec![4.0, 5.0, 6.0],","highlight_start":1,"highlight_end":33},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        let bias = Tensor::from_array_1d(vec![0.1f32, 0.2]);","highlight_start":1,"highlight_end":61},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        original_state.add_parameter(\"weight\".to_string(), weight);","highlight_start":1,"highlight_end":68},{"text":"        original_state.add_parameter(\"bias\".to_string(), bias);","highlight_start":1,"highlight_end":64},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let save_result = original_state.save_to_file(test_file);","highlight_start":1,"highlight_end":66},{"text":"        assert!(save_result.is_ok());","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_state = ModelState::load_from_file(test_file);","highlight_start":1,"highlight_end":66},{"text":"        assert!(loaded_state.is_ok());","highlight_start":1,"highlight_end":39},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_state = loaded_state.unwrap();","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(loaded_state.num_parameters(), 2);","highlight_start":1,"highlight_end":54},{"text":"        assert_eq!(loaded_state.get_metadata(\"model_type\"), Some(&\"test\".to_string()));","highlight_start":1,"highlight_end":88},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_weight = loaded_state.get_parameter(\"weight\").unwrap();","highlight_start":1,"highlight_end":75},{"text":"        assert_eq!(loaded_weight.shape(), vec![2, 3]);","highlight_start":1,"highlight_end":55},{"text":"        assert_eq!(loaded_weight.to_list::<f32>(), vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0]);","highlight_start":1,"highlight_end":88},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_bias = loaded_state.get_parameter(\"bias\").unwrap();","highlight_start":1,"highlight_end":71},{"text":"        assert_eq!(loaded_bias.shape(), vec![2]);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(loaded_bias.to_list::<f32>(), vec![0.1, 0.2]);","highlight_start":1,"highlight_end":66},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        cleanup_test_file(test_file);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_checkpoint_creation() {","highlight_start":1,"highlight_end":36},{"text":"        let mut model_state = ModelState::new();","highlight_start":1,"highlight_end":49},{"text":"        let weight = Tensor::from_array_1d(vec![1.0f32, 2.0, 3.0]);","highlight_start":1,"highlight_end":68},{"text":"        model_state.add_parameter(\"weight\".to_string(), weight);","highlight_start":1,"highlight_end":65},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let mut checkpoint = Checkpoint::new(model_state)","highlight_start":1,"highlight_end":58},{"text":"            .with_epoch(10)","highlight_start":1,"highlight_end":28},{"text":"            .with_loss(0.5);","highlight_start":1,"highlight_end":29},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        checkpoint.add_metric(\"accuracy\".to_string(), 0.95);","highlight_start":1,"highlight_end":61},{"text":"        checkpoint.add_metric(\"f1_score\".to_string(), 0.92);","highlight_start":1,"highlight_end":61},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(checkpoint.epoch, 10);","highlight_start":1,"highlight_end":42},{"text":"        assert_eq!(checkpoint.loss, 0.5);","highlight_start":1,"highlight_end":42},{"text":"        assert_eq!(checkpoint.get_metric(\"accuracy\"), Some(0.95));","highlight_start":1,"highlight_end":67},{"text":"        assert_eq!(checkpoint.get_metric(\"f1_score\"), Some(0.92));","highlight_start":1,"highlight_end":67},{"text":"        assert_eq!(checkpoint.get_metric(\"nonexistent\"), None);","highlight_start":1,"highlight_end":64},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_checkpoint_save_load() {","highlight_start":1,"highlight_end":37},{"text":"        let test_file = \"test_checkpoint.bin\";","highlight_start":1,"highlight_end":47},{"text":"        cleanup_test_file(test_file);","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let mut model_state = ModelState::new();","highlight_start":1,"highlight_end":49},{"text":"        model_state.add_metadata(\"model_type\".to_string(), \"classifier\".to_string());","highlight_start":1,"highlight_end":86},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let weight = Tensor::from_array_2d(vec![","highlight_start":1,"highlight_end":49},{"text":"            vec![1.0f32, 2.0],","highlight_start":1,"highlight_end":31},{"text":"            vec![3.0, 4.0],","highlight_start":1,"highlight_end":28},{"text":"        ]);","highlight_start":1,"highlight_end":12},{"text":"        model_state.add_parameter(\"weight\".to_string(), weight);","highlight_start":1,"highlight_end":65},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let mut original_checkpoint = Checkpoint::new(model_state)","highlight_start":1,"highlight_end":67},{"text":"            .with_epoch(5)","highlight_start":1,"highlight_end":27},{"text":"            .with_loss(0.25);","highlight_start":1,"highlight_end":30},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        original_checkpoint.add_metric(\"accuracy\".to_string(), 0.88);","highlight_start":1,"highlight_end":70},{"text":"        original_checkpoint.add_metric(\"precision\".to_string(), 0.90);","highlight_start":1,"highlight_end":71},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let save_result = original_checkpoint.save_to_file(test_file);","highlight_start":1,"highlight_end":71},{"text":"        assert!(save_result.is_ok());","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_checkpoint = Checkpoint::load_from_file(test_file);","highlight_start":1,"highlight_end":71},{"text":"        assert!(loaded_checkpoint.is_ok());","highlight_start":1,"highlight_end":44},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_checkpoint = loaded_checkpoint.unwrap();","highlight_start":1,"highlight_end":60},{"text":"        assert_eq!(loaded_checkpoint.epoch, 5);","highlight_start":1,"highlight_end":48},{"text":"        assert_eq!(loaded_checkpoint.loss, 0.25);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(loaded_checkpoint.get_metric(\"accuracy\"), Some(0.88));","highlight_start":1,"highlight_end":74},{"text":"        assert_eq!(loaded_checkpoint.get_metric(\"precision\"), Some(0.90));","highlight_start":1,"highlight_end":75},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        assert_eq!(loaded_checkpoint.model_state.num_parameters(), 1);","highlight_start":1,"highlight_end":71},{"text":"        let loaded_weight = loaded_checkpoint.model_state.get_parameter(\"weight\").unwrap();","highlight_start":1,"highlight_end":92},{"text":"        assert_eq!(loaded_weight.shape(), vec![2, 2]);","highlight_start":1,"highlight_end":55},{"text":"        assert_eq!(loaded_weight.to_list::<f32>(), vec![1.0, 2.0, 3.0, 4.0]);","highlight_start":1,"highlight_end":78},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        cleanup_test_file(test_file);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_optimizer_state_creation() {","highlight_start":1,"highlight_end":41},{"text":"        let parameter_names = vec![\"weight\".to_string(), \"bias\".to_string()];","highlight_start":1,"highlight_end":78},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let sgd_state = OptimizerState::from_sgd_config(0.01, 0.9, 1e-4, &parameter_names);","highlight_start":1,"highlight_end":92},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        match sgd_state {","highlight_start":1,"highlight_end":26},{"text":"            OptimizerState::SGD { lr, momentum, weight_decay, momentum_buffers } => {","highlight_start":1,"highlight_end":86},{"text":"                assert_eq!(lr, 0.01);","highlight_start":1,"highlight_end":38},{"text":"                assert_eq!(momentum, 0.9);","highlight_start":1,"highlight_end":43},{"text":"                assert_eq!(weight_decay, 1e-4);","highlight_start":1,"highlight_end":48},{"text":"                assert_eq!(momentum_buffers.len(), 2);","highlight_start":1,"highlight_end":55},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            _ => panic!(\"Expected SGD optimizer state\"),","highlight_start":1,"highlight_end":57},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let adam_state = OptimizerState::from_adam_config(0.001, 0.9, 0.999, 1e-8, 0.0, 0, &parameter_names);","highlight_start":1,"highlight_end":110},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        match adam_state {","highlight_start":1,"highlight_end":27},{"text":"            OptimizerState::Adam { lr, beta1, beta2, eps, exp_avg, exp_avg_sq, .. } => {","highlight_start":1,"highlight_end":89},{"text":"                assert_eq!(lr, 0.001);","highlight_start":1,"highlight_end":39},{"text":"                assert_eq!(beta1, 0.9);","highlight_start":1,"highlight_end":40},{"text":"                assert_eq!(beta2, 0.999);","highlight_start":1,"highlight_end":42},{"text":"                assert_eq!(eps, 1e-8);","highlight_start":1,"highlight_end":39},{"text":"                assert_eq!(exp_avg.len(), 2);","highlight_start":1,"highlight_end":46},{"text":"                assert_eq!(exp_avg_sq.len(), 2);","highlight_start":1,"highlight_end":49},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            _ => panic!(\"Expected Adam optimizer state\"),","highlight_start":1,"highlight_end":58},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_invalid_file_format() {","highlight_start":1,"highlight_end":36},{"text":"        let test_file = \"test_invalid.bin\";","highlight_start":1,"highlight_end":44},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        fs::write(test_file, b\"INVALID_HEADER\").unwrap();","highlight_start":1,"highlight_end":58},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let result = ModelState::load_from_file(test_file);","highlight_start":1,"highlight_end":60},{"text":"        assert!(result.is_err());","highlight_start":1,"highlight_end":34},{"text":"        assert!(result.unwrap_err().contains(\"Invalid file format\"));","highlight_start":1,"highlight_end":70},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        cleanup_test_file(test_file);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_empty_model_state_save_load() {","highlight_start":1,"highlight_end":44},{"text":"        let test_file = \"test_empty_model.bin\";","highlight_start":1,"highlight_end":48},{"text":"        cleanup_test_file(test_file);","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let original_state = ModelState::new();","highlight_start":1,"highlight_end":48},{"text":"        let save_result = original_state.save_to_file(test_file);","highlight_start":1,"highlight_end":66},{"text":"        assert!(save_result.is_ok());","highlight_start":1,"highlight_end":38},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_state = ModelState::load_from_file(test_file);","highlight_start":1,"highlight_end":66},{"text":"        assert!(loaded_state.is_ok());","highlight_start":1,"highlight_end":39},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let loaded_state = loaded_state.unwrap();","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(loaded_state.num_parameters(), 0);","highlight_start":1,"highlight_end":54},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        cleanup_test_file(test_file);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module has the same name as its containing module\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/serialization/tests.rs:6:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn cleanup_test_file(path: &str) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"46 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 46 warnings emitted\u001b[0m\n\n"}
